@startuml
' --- Core Game Management ---
class TMGE implements IGameManager {
    -logger: TMGELogger
    -games: List<Game>
    -player_profiles: List<PlayerProfile>
    -profiles_file: str
    +load_profiles(): void
    +save_profiles(): void
    +register_game(game: Game): void
    +get_available_games(): List<Game>
    +get_player_profiles(): List<PlayerProfile>
    +add_player_profile(profile: PlayerProfile): void
    +start(): void
    +quit(): void
}

class TMGELogger {
    #_instance: Object
    #_initialized: bool
    +setup_logger(): void
    +debug(message: str): void
    +info(message: str): void
    +warning(message: str): void
    +error(message: str): void
    +critical(message: str): void
}

class TMGEApplication {
    #tmge: TMGE
    #game_controls_dict: Dict
    #current_profiles: List<PlayerProfile>
    +on_login_success(profile: PlayerProfile): void
    +show_main_window(): void
    +quit_tmge(): void
    +set_controls(): dict
}

' --- Games ---
abstract class Game implements IGameLoop, IInputHandler {
    #logger: TMGELogger
    #game_id: str
    #grid: Grid
    #min_players: number
    #max_players: number
    #current_player_count: number
    #players: List<Player>
    #controls: Dict
    #is_paused: bool
    #is_game_over: bool
    -matching_strategy: IMatchingStrategy
    {abstract} initialize_game(): void
    {abstract} check_win_condition(): bool
    {abstract} check_loss_condition(): bool
    +handle_game_over(): void
    +restart_game(): void
    +exit_to_menu(): void
    +pause_game(): void
    +init(): void
    +update(): void
    +draw(): void
    +handle_key_press(event: Object): void
    +handle_key_release(event: Object): void
}

class TetrisGame extends Game {
    -grids: List<Grid>
    -current_pieces: List<TetrisPiece>
    -scores: List<int>
    -fall_times: List<float>
    -fall_speed: float
    -last_falls: List<float>
    -game_over: List<bool>
    + __init__(game_id: str, players: List<Player>, controls, matching_strategy: IMatchingStrategy)
    +_move_piece(player: int, dx: int, dy: int): bool
    +_rotate_piece(player: int): void
    +_hard_drop(player: int): void
    +_freeze_piece(player: int): void
    +_clear_lines(player: int): void
}

class TetrisMatchingStrategy implements IMatchingStrategy {
    +match(grid: Grid): List[int]
}

class PuzzleFighterGame extends Game {
    -grids: List<Grid>
    -current_pieces: List<PuzzleFighterPiece>
    -scores: List<int>
    -fall_times: List<float>
    -combo_counters: List<int>
    -pending_attacks: List<List>
    +__init__(game_id: str, players: List[Player], controls: Dict, matching_strategy: IMatchingStrategy): void
    +_find_adjacent_matches(player: int, x: int, y: int, color: str, visited: Set[Tuple[int, int]]): Set[Tuple[int, int]]
    +_check_chain_reaction(): void
    +_process_power_gems(): void
    +_apply_gravity(): void
}

class PuzzleFighterMatchingStrategy implements IMatchingStrategy {
    - visited: Set<Tuple<int, int>>
    + match(grid: Grid) : List<List<Tile>>
    + _find_adjacent_matches(grid: Grid, x: int, y: int, color: str, visited: Set<Tuple<int, int>>) : Set<Tuple<int, int>>
}

' --- Game Pieces ---
class TetrisPiece {
    +SHAPES: Dict
    +COLORS: Dict
    -shape: str
    -coords: List<Tuple>
    -color: str
    -x: int
    -y: int
    +move(dx: int, dy: int): void
    +rotate(): void
    +get_positions(): List<Tuple>
}

class PuzzleFighterPiece {
    +COLORS: List<str>
    +TYPES: List<str>
    -main_color: str
    -sub_color: str
    -is_power: bool
    -x: int
    -y: int
    -connector_position: str
    +rotate_clockwise(): void
    +get_positions(): List<Tuple>
    +move(dx: int, dy: int): void
}

' --- Grid System ---
class Grid {
    -rows: int
    -columns: int
    -tiles: List[List[Optional[Tile]]]
    +__init__(rows: int, columns: int): void
    +is_valid_position(x: int, y: int): bool
    +place_tile(tile: Tile, x: int, y: int): bool
    +get_tile(x: int, y: int): Optional[Tile]
    +is_valid_movement(tile: Tile, new_x: int, new_y: int): bool
}

class Tile {
    -tile_type: Any
    -tile_state: str
    -tile_shape: TileShape
    -tile_color: str
    -position: Tuple<int, int>
    +set_position(x: int, y: int): void
    +get_position(): Tuple<int, int>
    +is_matching(other: Tile): bool
    +occupies_position(x: int, y: int): bool
}

' --- UI Components ---
class GameUI {
    -root: Tkinter
    -game: Game
    -cell_size: int
    -padding: int
    -colors: Dict
    -canvas: tk.Canvas
    +init_ui(): void
    +draw_grid(): void
    +update(): void
    +_get_tile_color(tile: Tile): str
}

class HomeWindow {
    -tmge: TMGE
    -profile: PlayerProfile
    -window: Tkinter
    -stle: TKinter.Style
    -controls: dict
    +setup_styles(): void
    +create_widgets(): void
    +create_games_section(): void
    +create_game_card(parent: Object, game: Game): Tkinter.Frame
    +create_stats_section(parent: Object): void
    +create_menu(): void
    +start_game(): void
    +refresh_stats(): void
    +show_controls(): void
    +show_about(): void
    +logout(): void
    +quit_application(): void
}

class LoginWindow {
    -tmge: TMGE
    -window: tk.Tk
    -username_entry: ttk.Entry
    -on_login_success: Object
    -style: Tkinter.Style
    +setup_ui(): void
    +login(): void
    +show_create_profile(): void
    +create_profile(): void
}

' --- Player Management ---
class Player {
    -profile: PlayerProfile
    -score: int
    +update_score(points: int): void
}

class PlayerProfile {
    -username: str
    -stats: Dict<str, GameStats>
    +login(username: str): void
    +update_stats(game_id: str, stats: GameStats): void
}

class GameStats {
    -high_score: int
    -games_played: int
    -wins: int
    +update_score(score: int): void
    +increment_games_played(): void
    +add_win(): void
}
' --- Interfaces ---
interface IGameManager {
    {abstract} quit(): void
}

interface IGameLoop {
    {abstract} update()
    {abstract} draw()
}

interface IInputHandler {
    {abstract} handle_key_press(event: Object)
    {abstract} handle_key_release(event: Object)
}

interface IMatchingStrategy {
    +match(grid: Grid): List<List<Tile>>
}

' --- Relationships ---
TMGEApplication "1" o-- "1" TMGE
TMGE "1" o-- "*" Game
TMGE "1" o-- "*" PlayerProfile
TMGE "1" o-- "1" TMGELogger
Game "1" *-- "1..*" Grid
Game "1" o-- "2" Player
Game --> IMatchingStrategy : uses
TetrisGame "1" *-- "*" TetrisPiece
TetrisGame ..> IMatchingStrategy : uses
PuzzleFighterGame "1" *-- "*" PuzzleFighterPiece
PuzzleFighterGame ..> IMatchingStrategy : uses
Grid "1" *-- "*" Tile
Player "1" -- "1" PlayerProfile
PlayerProfile "1" -- "*" GameStats
HomeWindow "1" -- "1" TMGE
HomeWindow --> MatchingStrategyFactory : uses
LoginWindow "1" -- "1" TMGE
GameUI "1" -- "1" Game

MatchingStrategyFactory --> IMatchingStrategy : creates
@enduml